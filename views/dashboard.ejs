<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Live Library Dashboard</title>
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body { font-family: system-ui, sans-serif; background-color: #f0f2f5; color: #1c1e21; margin: 0; padding: 2em; }
        .container { max-width: 800px; margin: auto; }
        h1, h2 { color: #000; }
        nav { margin-bottom: 2em; background: white; padding: 1em; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); display: flex; justify-content: space-around; }
        nav a { text-decoration: none; font-weight: bold; color: #0866ff; font-size: 1.1em; }
        .panel { background: white; padding: 1.5em; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); margin-bottom: 2em; }
        #live-log-list { list-style-type: none; padding: 0; margin: 0; min-height: 100px; }
        #live-log-list li { padding: 1.2em; border-bottom: 1px solid #ddd; font-size: 1.2em; text-align: center; }
        .log-login { color: #31a24c; }
        .log-logout { color: #555; }
        .log-error, .log-ignored { color: #f02849; font-weight: bold; }
        table { width: 100%; border-collapse: collapse; margin-top: 1em; }
        th, td { border: 1px solid #ddd; padding: 10px; text-align: left; }
        th { background-color: #f2f2f2; font-weight: bold; }
        .chart-container {
            position: relative;
            margin: auto;
            height: 40vh;
            width: 80vw;
            max-width: 450px;
        }
    </style>
</head>
<body>
    <div class="container">
        <nav>
            <a href="/register">Register New Card &rarr;</a>
            <a href="/manage-users">Manage Users &rarr;</a>
        </nav>
        
        <div class="panel">
            <ul id="live-log-list">
                <li style="color: #65676b; font-size: 1.2em;">Please scan your card</li>
            </ul>
        </div>
        
        <div class="panel">
            <h2>Student Visits by Branch Today</h2>
            <div class="chart-container">
                <canvas id="branchVisitChart"></canvas>
            </div>
        </div>
        
        <div class="panel">
            <h2>Today's Attendance Log</h2>
            <table id="attendance-table">
                <thead><tr><th>User ID</th><th>Name</th><th>Login</th><th>Logout</th></tr></thead>
                <tbody>
                  <% logs.forEach(log => { %>
                      <tr>
                          <td><%= log.user_id %></td>
                          <td><%= log.user_name %></td>
                          <td><%= log.login_time %></td>
                          <td><%= log.logout_time || '---' %></td>
                      </tr>
                  <% }); %>
                </tbody>
            </table>
        </div>
    </div>

    <script>
        const socket = io();
        const liveLogList = document.getElementById('live-log-list');
        const attendanceTableBody = document.getElementById('attendance-table').getElementsByTagName('tbody')[0];
        
        const initialCounts = <%- JSON.stringify(counts) %>;
        const ctx = document.getElementById('branchVisitChart').getContext('2d');
        
        const branchChart = new Chart(ctx, {
            type: 'doughnut',
            data: {
                // MODIFIED: Use branch_code for the labels
                labels: initialCounts.map(c => c.branch_code),
                datasets: [{
                    label: 'Visits',
                    data: initialCounts.map(c => c.visit_count),
                    backgroundColor: [
                        '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF',
                        '#FF9F40', '#C9CBCF', '#7ACBF5', '#F57A9A', '#B2F57A'
                    ],
                    hoverOffset: 4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'right',
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const label = context.label || '';
                                const value = context.parsed || 0;
                                return ` ${label}: ${value} student(s)`;
                            }
                        }
                    }
                }
            }
        });

        socket.on('scan_event', function(data) {
            const logItem = document.createElement('li');
            let message = '';
            
            if (data.status === 'LOGIN') {
                logItem.className = 'log-login';
                message = `Welcome, <strong>${data.user_name}</strong>`;
                
                const newRow = attendanceTableBody.insertRow(0);
                newRow.insertCell(0).innerHTML = data.user_id;
                newRow.insertCell(1).innerHTML = data.user_name;
                newRow.insertCell(2).innerHTML = data.time;
                newRow.insertCell(3).innerHTML = '---';

            } else if (data.status === 'LOGOUT') {
                logItem.className = 'log-logout';
                message = `Thank You, <strong>${data.user_name}</strong>`;

                const rows = attendanceTableBody.getElementsByTagName('tr');
                for (let i = 0; i < rows.length; i++) {
                    const userIdCell = rows[i].cells[0];
                    const logoutCell = rows[i].cells[3];
                    if (userIdCell.textContent == data.user_id && logoutCell.textContent === '---') {
                        logoutCell.innerHTML = data.time;
                        break;
                    }
                }
            } else if (data.status === 'UNREGISTERED' || data.status === 'NO_DETAILS') {
                logItem.className = 'log-error';
                message = `⚠️ Card not recognized. Please register.`;
            } else if (data.status === 'IGNORED') {
                logItem.className = 'log-error';
                message = `🚫 ${data.message}`;
            }

            if (message) {
                liveLogList.innerHTML = '';
                logItem.innerHTML = message;
                liveLogList.prepend(logItem);
            }
        });

        // MODIFIED: Update the chart using branch_code
        socket.on('counts_update', function(newCounts) {
            branchChart.data.labels = newCounts.map(c => c.branch_code);
            branchChart.data.datasets[0].data = newCounts.map(c => c.visit_count);
            branchChart.update();
        });
    </script>
</body>
</html>

